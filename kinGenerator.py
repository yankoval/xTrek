import json
from datetime import datetime, timedelta
import uuid
import random
# from google.colab import files
import os

class KinReportGenerator:
    def __init__(self):
        self.uploaded_files = {}

    def extract_short_code(self, full_code):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if not full_code or not isinstance(full_code, str):
                return None

            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–¥ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é GS (\u001D)
            parts = full_code.split('\u001D')
            if not parts:
                return None

            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç GTIN –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥
            main_part = parts[0]

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ 21 (–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞)
            pos_21 = main_part.find('21')
            if pos_21 == -1:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ '21'
            short_code_start = pos_21 + 2
            short_code_end = short_code_start + 6

            if short_code_end <= len(main_part):
                return main_part[short_code_start:short_code_end]
            else:
                return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞: {e}")
            return None

    def load_files(self, file_names):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –∏–º–µ–Ω"""
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")

        for file_name in file_names:
            if os.path.exists(file_name):
                try:
                    with open(file_name, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    self.uploaded_files[file_name] = data
                    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_name}")
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}: {e}")
            else:
                print(f"‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")

        return len(self.uploaded_files) > 0

    def calculate_max_kits(self, kigu_codes, all_kit_codes):
        """–ü–æ–¥—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±–æ—Ä–æ–≤"""
        if not kigu_codes or not all_kit_codes:
            return 0

        max_from_kigu = len(kigu_codes)
        max_from_kits = min(len(codes) for codes in all_kit_codes) if all_kit_codes else 0

        return min(max_from_kigu, max_from_kits)

    def generate_kin_report(self, file_names, num_kits=None):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ò–ù –æ—Ç—á–µ—Ç–∞

        Args:
            file_names: —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            num_kits: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (None - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ)

        Returns:
            str: –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
        if not self.load_files(file_names):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
            return None

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å Hierarchy
        main_data = None
        kigu_gtin = None

        for filename, data in self.uploaded_files.items():
            if 'Hierarchy' in data:
                main_data = data
                # –ò–∑–≤–ª–µ–∫–∞–µ–º GTIN Kigu
                for level in data.get('Hierarchy', []):
                    if level['LevelType'] == 'Kigu':
                        for pack in level['Packs']:
                            kigu_gtin = pack['GTIN']
                break

        if not main_data or not kigu_gtin:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–±–æ—Ä–∞")
            return None

        print(f"–ù–∞–π–¥–µ–Ω Kigu GTIN: {kigu_gtin}")

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±–æ—Ä–æ–≤
        print("üîç –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤...")

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        kigu_codes = []
        all_kit_codes = []

        # –ò—â–µ–º Kigu —Ñ–∞–π–ª
        for filename, data in self.uploaded_files.items():
            if 'codes' in data and data.get('codes') and kigu_gtin in data['codes'][0]:
                kigu_codes = data['codes']
                break

        # –ò—â–µ–º Kit —Ñ–∞–π–ª—ã
        kit_gtins = []
        for level in main_data.get('Hierarchy', []):
            if level['LevelType'] == 'Kit':
                for pack in level['Packs']:
                    kit_gtins.append(pack['GTIN'])

        for kit_gtin in kit_gtins:
            for filename, data in self.uploaded_files.items():
                if 'codes' in data and data.get('codes') and kit_gtin in data['codes'][0]:
                    all_kit_codes.append(data['codes'])
                    break

        max_kits = self.calculate_max_kits(kigu_codes, all_kit_codes)

        if max_kits == 0:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if num_kits is None:
            num_kits = max_kits
        elif num_kits > max_kits:
            print(f"‚ùå –ù–µ–ª—å–∑—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ {max_kits} –Ω–∞–±–æ—Ä–æ–≤")
            return None

        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_kits} –Ω–∞–±–æ—Ä–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        kin_report = self._create_report_data(kigu_gtin, num_kits)

        if not kin_report:
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        output_filename = f"{kigu_gtin}_kin_report.json"

        try:
            with open(output_filename, 'w', encoding='utf-8') as f:
                json.dump(kin_report, f, ensure_ascii=False, indent=2)

            print(f"‚úÖ –ö–ò–ù –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_filename}")
            return output_filename

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def _create_report_data(self, kigu_gtin, num_kits):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞"""

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è Kigu
        kigu_data = None

        for filename, data in self.uploaded_files.items():
            if 'codes' in data and data.get('codes'):
                if data['codes'] and kigu_gtin in data['codes'][0]:
                    kigu_data = data
                    break

        if not kigu_data:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏ –¥–ª—è Kigu GTIN: {kigu_gtin}")
            return None

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GTIN –¥–ª—è Kit –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        kit_gtins = []
        for filename, data in self.uploaded_files.items():
            if 'Hierarchy' in data:
                for level in data.get('Hierarchy', []):
                    if level['LevelType'] == 'Kit':
                        for pack in level['Packs']:
                            kit_gtins.append(pack['GTIN'])

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Kit
        kit_data_list = []

        for kit_gtin in kit_gtins:
            for filename, data in self.uploaded_files.items():
                if 'codes' in data and data.get('codes'):
                    if data['codes'] and kit_gtin in data['codes'][0]:
                        kit_data_list.append(data)
                        break

        if not kit_data_list:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è Kit –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã
        kigu_codes = kigu_data.get('codes', [])
        if not kigu_codes:
            print("‚ùå –í –¥–∞–Ω–Ω—ã—Ö Kigu –Ω–µ—Ç –∫–æ–¥–æ–≤ –∫–æ—Ä–æ–±–æ–∫")
            return None

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        all_kit_codes = [kit_data.get('codes', []) for kit_data in kit_data_list]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–æ–¥–æ–≤
        max_available = self.calculate_max_kits(kigu_codes, all_kit_codes)
        if num_kits > max_available:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è {num_kits} –Ω–∞–±–æ—Ä–æ–≤")
            return None

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        start_time = datetime.now()
        ready_boxes = []

        for i in range(num_kits):
            product_numbers = []
            product_numbers_full = []

            # –ë–µ—Ä–µ–º –∫–æ–¥—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ Kit
            for kit_codes in all_kit_codes:
                if i < len(kit_codes):
                    full_code = kit_codes[i]
                    short_code = self.extract_short_code(full_code)

                    if short_code:
                        product_numbers.append(short_code)
                        product_numbers_full.append(full_code)

            # –ù–æ–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏ –∏–∑ Kigu
            box_number = kigu_codes[i]

            box = {
                "Number": i,
                "boxNumber": box_number,
                "boxAgregate": True,
                "boxTime": (start_time + timedelta(minutes=random.randint(2, 30))).isoformat(),
                "productNumbers": product_numbers,
                "productNumbersFull": product_numbers_full
            }

            ready_boxes.append(box)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        end_time = datetime.now()

        return {
            "id": str(uuid.uuid4()),
            "startTime": start_time.isoformat(),
            "endTime": end_time.isoformat(),
            "operators": [],
            "readyBox": ready_boxes,
            "sampleNumbers": [],
            "sampleNumbersFull": None,
            "defectiveCodes": None,
            "defectiveCodesFull": None,
            "emptyNumbers": None
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
def generate_kin_report_from_files(file_names, num_kits=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ö–ò–ù –æ—Ç—á–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    Args:
        file_names: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ JSON —Ñ–∞–π–ª–∞–º
        num_kits: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ (None - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)

    Returns:
        str: –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    generator = KinReportGenerator()
    return generator.generate_kin_report(file_names, num_kits)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Google Colab
def main_colab():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Colab"""
    print("=== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–ò–ù –æ—Ç—á–µ—Ç–∞ ===")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Colab
    print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    uploaded = files.upload()

    file_names = []
    for filename, content in uploaded.items():
        if filename.endswith('.json'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
            with open(filename, 'wb') as f:
                f.write(content)
            file_names.append(filename)
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}")

    if not file_names:
        print("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report_file = generate_kin_report_from_files(file_names)

    if report_file:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                data = json.dumps(f)
            print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {report_file}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {report_file}: {e}")
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        files.download(report_file)
        print(f"‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤: {report_file}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Colab
    # main_colab()

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –º–æ–¥—É–ª—è
    files_list = [
        "–Ω–∞–±–æ—Ä_04640286990808.json",          # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å Hierarchy
        "04630234043762.json", # –§–∞–π–ª —Å –∫–æ–¥–∞–º–∏ Kigu
        "04640286990808.json", # –§–∞–π–ª —Å –∫–æ–¥–∞–º–∏ Kit 1
        "04751042821837.json"  # –§–∞–π–ª —Å –∫–æ–¥–∞–º–∏ Kit 2
    ]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±–æ—Ä–æ–≤
    report_filename = generate_kin_report_from_files(files_list)

    # –ò–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    # report_filename = generate_kin_report_from_files(files_list, 50)